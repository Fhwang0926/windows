name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '.gitignore'
      - '.dockerignore'
      - '.github/**'
      # - '.github/workflows/**'

concurrency:
  group: build
  cancel-in-progress: false

jobs:
  shellcheck:
    name: Test
    uses: ./.github/workflows/check.yml
  build:
    name: Build
    needs: shellcheck
    runs-on: ubuntu-latest
    permissions:
      actions: write
      packages: write
      contents: read
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # -
      #   name: Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     context: git
      #     images: |
      #       ${{ secrets.DOCKERHUB_REPO }}
      #     # images: |
      #     #   ${{ secrets.DOCKERHUB_REPO }}
      #     #   ghcr.io/${{ github.repository }}
      #     tags: |
      #       type=raw,value=latest,priority=100
      #       type=raw,value=${{ vars.MAJOR }}.${{ vars.MINOR }}
      #     labels: |
      #       org.opencontainers.image.title=${{ vars.NAME }}
      #   env:
      #     DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index     
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # -
      #   name: Login into Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.DOCKERHUB_REPO }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # -
      #   name: Build Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     provenance: false
      #     platforms: linux/amd64,linux/arm64,linux/arm
      #     tags: ${{ steps.meta.outputs.tags || 'latest' }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     annotations: ${{ steps.meta.outputs.annotations }}
      #     build-args: |
      #       VERSION_ARG=${{ steps.meta.outputs.version || 'latest' }}
      # -
      #   name: Create a release
      #   uses: action-pack/github-release@v2
      #   with:
      #     tag: "v${{ steps.meta.outputs.version || 'latest' }}"
      #     title: "v${{ steps.meta.outputs.version || 'latest' }}"
      #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
      # -
      #   name: Increment version variable
      #   uses: action-pack/bump@v2
      #   with:
      #     token: ${{ secrets.REPO_ACCESS_TOKEN }}


      # login to harbor
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKERHUB_REPO }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
        # start build and push
      - 
        name: Build the tagged Docker image
        run: docker build app --file ./Dockerfile --tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base --tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:latest
      - 
        name: Push the tagged Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base

          docker image tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base harbor.donghwa.dev:4443/seo/windows:2016
          docker image tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base harbor.donghwa.dev:4443/seo/windows:2022
          docker image tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base harbor.donghwa.dev:4443/seo/windows:win10
          docker image tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base harbor.donghwa.dev:4443/seo/windows:win11
          docker image tag ${{ secrets.DOCKERHUB_REPO  }}/seo/win:base harbor.donghwa.dev:4443/seo/windows:win7
      
      - 
        name: Push the tagged Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_REPO  }}/seo/win:latest

          docker push harbor.donghwa.dev:4443/seo/windows:2016
          docker push harbor.donghwa.dev:4443/seo/windows:2022
          docker push harbor.donghwa.dev:4443/seo/windows:win10
          docker push harbor.donghwa.dev:4443/seo/windows:win11
          docker push harbor.donghwa.dev:4443/seo/windows:win7

  apply-if-failed:
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && (needs.apply.result == 'failure')
    steps:
      - name: WEBHOOK apply was failed
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Slack Notification Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF2D00' # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'github cd/ci was failed'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: security-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
